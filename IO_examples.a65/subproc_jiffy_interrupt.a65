;
; Jiffy timer with interrupt
;
iomap   equ $bf00       ;I/O page (A15:8)
; IO subprocessor (ATMega16)
ios_    equ iomap+$70   ;base address of the IO subprocessor
ios_r0  equ ios_        ;IO register @ ios_adr, read/write
ios_r1  equ ios_+1      ;IO register @ ios_adr+1, read/write
ios_r2  equ ios_+2      ;IO register @ ios_adr+2, read/write
ios_adr equ ios_+3      ;IO register address, write only
ios_vec equ ios_+3      ;IRQ vector register, read only
ios_ar  equ ios_+4      ;alternate IO register @ ios_aad, read/write
ios_aad equ ios_+5      ;alternate IO register address, write only
ios_xdr equ ios_+5      ;unit data register without special function, read only
ios_dr  equ ios_+6      ;unit data register with extra functions, read/write
ios_cr  equ ios_+7      ;command register, write only
ios_drx equ ios_+7      ;current unit data register index, read only

        nolist
        include "m16def.i65"
        list
        
        org $200

jiffy_initialize
        lda #9          ;load unit index: timer 1 with icr1
        sta ios_cr      ;r0=tccr1b r1=tccr1a r2=sfior ar=tcnt1:2 dr=icr1:2
        lda #0          ;clear tcnt1
        sta ios_ar
        sta ios_ar
        lda #$9c        ;set ceiling for 20ms @ 16Mhz/8
        sta ios_dr      ;store high byte 1st
        lda #$3f        ;then low byte
        sta ios_dr
        lda #(1<<is_wgm13)|(1<<is_wgm12)|(1<<is_cs10)
        sta ios_r0      ;T1 CTC top=ICR, clock/8
        lda #$60+10     ;set timsk,ticie1 (enable ICR interrupt)
        sta ios_cr
        cli
main
        jmp main        ;do nothing in main
        
irq_dispatch            ;interrogate source of irq
        pha             ;save registers
        txa
        pha
        ldx ios_vec     ;read vector, if <> 0 then subprocessor = vectored mode
        cpx #10         ;lower 6 vectors only
        bcc irq_unsol
        lda irq_table+1,x ;load vector dispatch address
        pha
        lda irq_table,x
        pha
        rts
irq_table
        dw  irq_other-1,irq_unsol-1,irq_unsol-1,irq_unsol-1,irq_unsol-1
        dw  irq_jiffy-1
;on a 65c02 the code can be shorter
;        ...
;        bcc irq_unsol
;        jmp (irq_table,x)
;irq_table
;        dw  irq_other,irq_unsol,irq_unsol,irq_unsol,irq_unsol,irq_jiffy

jiffy_count             ;20ms tick counter - should reside in RAM
        ds  2
irq_jiffy               ;irq source is icr1
        inc jiffy_count ;count jiffies
        bne irq_exit2
        inc jiffy_count+1
irq_exit2
        bit ios_vec     ;dummy read, subprocessor = normal mode
irq_exit
        pla             ;restore registers
        tax
        pla
        rti
irq_other               ;scan irq sources other than the subprocessor
        jmp irq_exit
irq_unsol               ;unsolicited subprocessor irq - add error handler
        jmp *           ;loop until reset

        org $fffe       ;set global IRQ vector
        dw  irq_dispatch        
        