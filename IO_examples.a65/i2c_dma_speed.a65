iomap   equ $bf00       ;I/O page (A15:8)
; diag
emu_dig equ iomap+$fc   ;diagnostic emulator flags, read/write
; RS232
ser_dat equ iomap+$f0   ;RS232 RX/TX data register, read/write
ser_msk equ iomap+$fe   ;RS232 interrupt enable mask register, read/write
ser_flg equ iomap+$ff   ;RS232 buffer flag register, read/write
; timer
tim_cdn equ iomap+$f1   ;10ms tick timer countdown register, read/write
t1_adr  equ iomap+$f4   ;timer 1 register address, read/write
t1_dat  equ iomap+$f5   ;timer 1 register data, read/write
tim_msk equ iomap+$fe   ;timer interrupt enable mask register, read/write
tim_flg equ iomap+$ff   ;timer flag register, read/write
; IRQ vector
irq_vec equ iomap+$fd   ;irq vector register, read only
; character LCD
lcd_cmd equ iomap+$d0   ;lcd command register, read/write
lcd_dat equ iomap+$d1   ;lcd data register, read/write
lcd_rcd equ iomap+$d2   ;lcd raw command register (no busy wait), read/write
lcd_rdt equ iomap+$d3   ;lcd raw data register (no busy wait), read/write
; I2C
i2c_cmd equ iomap+$f2   ;i2c command register, write only
i2c_sta equ iomap+$f2   ;i2c status register, read only
i2c_dat equ iomap+$f3   ;i2c data register, read/write
; SPI
spi_cmd equ iomap+$f6   ;spi command register, write only
spi_lrd equ iomap+$f6   ;spi last read data register, read only
spi_dat equ iomap+$90   ;spi data register set, read/write
; SPI device list
spi_sd  equ spi_dat     ;SD card slot
spi_165 equ spi_dat+1   ;74HC165 parallel input shift register
spi_595 equ spi_dat+2   ;74HC595 parallel output shift register
spi_eep equ spi_dat+3   ;25LC512 EEPROM
; DMA
dma_cmd equ iomap+$f7   ;dma command register, write only
dma_sta equ iomap+$f7   ;dma status register, read only
dma_dat equ iomap+$f8   ;dma data register, read/write

eep_adr equ $a0

        bss
        org 0
read_pio    ds  2       ;read 4k block, programmed IO
read_dma    ds  2       ;read 4k block, DMA

        org $2000
buf1        ds  4096    ;4k block 1
              
        code

stop_debug   macro
        db  $db         ;uses 65c02 stop instruction, exception trap on 6502
        endm

i2c_start   macro       ;\1 = address
        local start_wack
start_wack
        lda #2          ;start 400 kHz
        sta i2c_cmd
        lda #\1         ;send address
        sta i2c_dat
        lda i2c_sta     ;test ack
        and #$40
        beq start_wack ;loop on nak - no timeout
        endm

i2c_stop    macro
        lda #0          ;stop
        sta i2c_cmd
        endm

start_t1    macro
        lda #7          ;clear counter
        sta t1_adr
        lda #0
        sta t1_dat
        sta t1_dat
        lda #8          ;set tccr to start timer
        sta t1_adr
        lda #%1101       ;64µs
        sta t1_dat
        endm

stop_t1     macro       ;\1 = location to save count value
        lda #0          ;stop counter
        sta t1_dat
        lda #6          ;read counter
        sta t1_adr
        lda t1_dat
        sta \1
        lda t1_dat
        sta \1+1
        endm

set_dma     macro       ;\1 = parameter set
        lda #1          ;set dma parameters
        sta dma_cmd
        ldx #1
set_dma\?
        lda \1,x
        sta dma_dat
        inx
        cpx #5
        bne set_dma\?
        endm

        org $1000

start

;read with programmed IO
        ldy #hi(buf1)   ;reset self modified address
        sty rd_pio1_hi
        i2c_start eep_adr ;write eep address
        lda #0            ;write address
        sta i2c_dat
        sta i2c_dat
        i2c_start eep_adr+1 ;rep. start read
        start_t1
rd_pio1
        lda i2c_dat
rd_pio1_hi = *+2
        sta buf1,x
        inx
        bne rd_pio1
        iny
        sty rd_pio1_hi
        cpy #(buf1>>8)+$10
        bne rd_pio1
        stop_t1 read_pio
        i2c_stop
        
;read with dma
        set_dma dma_rbuf
        i2c_start eep_adr ;write eep address
        lda #0            ;write address
        sta i2c_dat
        sta i2c_dat
        i2c_start eep_adr+1 ;rep. start read
        start_t1
        lda #5          ;read i2c dma
        sta dma_cmd
        stop_t1 read_dma
        i2c_stop

        stop_debug
        jmp start

dma_rbuf    db  1       ;serial in
            dw  buf1
            dw  4096

        org $fffc       ;reset
        dw  start
        
        end start
        