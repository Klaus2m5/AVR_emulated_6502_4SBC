;
; IO subprocessor test: USART polled
;
iomap   equ $bf00       ;I/O page (A15:8)
; IO subprocessor (ATMega16)
ios_    equ iomap+$70   ;base address of the IO subprocessor
ios_r0  equ ios_        ;IO register @ ios_adr, read/write
ios_r1  equ ios_+1      ;IO register @ ios_adr+1, read/write
ios_r2  equ ios_+2      ;IO register @ ios_adr+2, read/write
ios_adr equ ios_+3      ;IO register address, write only
ios_vec equ ios_+3      ;IRQ vector register, read only
ios_ar  equ ios_+4      ;alternate IO register @ ios_aad, read/write
ios_aad equ ios_+5      ;alternate IO register address, write only
ios_xdr equ ios_+5      ;unit data register without special function, read only
ios_dr  equ ios_+6      ;unit data register with extra functions, read/write
ios_cr  equ ios_+7      ;command register, write only
ios_drx equ ios_+7      ;current unit data register index, read only

        nolist
        include "m16def.i65"
        list
        
        bss
        org 0
seed        ds  1
modifier    ds  1
        org $20
pattern     ds  16
            ds  3       ;diffusor space
        org $40
read        ds  16

        code        
        org $1000

start
        lda #isc_usart      ;init USART
        sta ios_cr
        lda #$19            ;38400 Baud @ 16MHz
        sta ios_r0          ;ubrrl
        lda #(1<<is_rxen)|(1<<is_txen) ;enable USART
        sta ios_r1          ;ucsrb         
        lda #0
        sta seed
        sta modifier
        
inc_test                    ;generate test pattern
        ldx #2
        lda seed
inc_test_pre                 
        clc
        adc modifier
        dex
        bpl inc_test_pre
        ldx #15
inc_test_pat
        sta pattern,x
        clc
        adc modifier
        dex
        bpl inc_test_pat
        jsr verify
        inc modifier
        bne inc_test
        inc seed
        bne inc_test


inc_xor                     ;generate pattern with inversion
        ldx #2
        lda seed
inc_xor_pre                 
        clc
        adc modifier
        dex
        bpl inc_xor_pre
        ldx #15
inc_xor_pat
        sta pattern,x
        clc
        adc modifier
        dex
        eor #$ff
        sta pattern,x
        eor #$ff
        clc
        adc modifier
        dex
        bpl inc_xor_pat
        jsr verify
        inc modifier
        bne inc_xor
        inc seed
        bne inc_xor

        jmp start        

verify  ldx #15             ;sub write - read - verify
wr_loop lda pattern,x
        sta ios_dr          ;udr
wait_rxc
        lda ios_r2          ;ucsra
        bpl wait_rxc        ;wait rxc = 1
        and #(1<<is_fe|1<<is_dor|1<<is_upe) ;check for errors
        bne *
        lda ios_dr          ;receive data register
        sta read,x
        dex
        bpl wr_loop

        ldx #15             ;compare read to lastpat
cp_loop lda pattern,x
        cmp read,x
        bne *
        dex
        bpl cp_loop
        rts        

; take a subprocessor dump of the 1st 512 bytes ->$200-$3ff
; set PC to dump_ios and start
dump_ios
        lda #is_sreg        ;override safety lock
        sta ios_aad
        lda #isc_diaga
        sta ios_cr
        ldx #0              ;from 0
        stx ios_dr
        stx ios_dr
dump_loop
        lda ios_dr
        sta $200,x
        inx                 ;for 256 bytes
        bne dump_loop
dump_loop2
        lda ios_dr
        sta $300,x
        inx                 ;for 256 bytes
        bne dump_loop2
        db  $db             ;stop        
        end start
        
        